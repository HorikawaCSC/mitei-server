name: Test / Build

on:
  pull_request:
    types: [closed]
    branches:
      - master
  push:
    branches: "*"

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(github.ref, '/master')
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v1
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencies packages
      run: yarn --frozen-lockfile
      env:
        CI: true
    - name: Build
      run: yarn run build
    - name: Test codes
      run: yarn run test

  version-update-publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged && startsWith(github.event.pull_request.title, 'Release version:') && contains(github.base_ref, 'master')
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.base_ref }}
    - name: Fetch all tags
      run: |
        git fetch origin +refs/tags/*:refs/tags/*
        git fetch --prune --unshallow
    - name: Reset & Reattach HEAD
      run: git reset --hard
    - name: Check pull request
      run: perl ./tools/update-version-from-pr.pl
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        CHECK_ONLY: true
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
        registry-url: 'https://registry.npmjs.org'
    - uses: actions/cache@v1
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencies packages
      run: yarn --frozen-lockfile
      env:
        CI: true
    - name: Setup git
      run: |
        git remote set-url --push origin https://${{ github.actor }}:$GITHUB_TOKEN@github.com/${{ github.repository }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Update version
      run: perl ./tools/update-version-from-pr.pl
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
    - name: Build (production)
      run: yarn run build
      env:
        NODE_ENV: production
    - name: Test codes
      run: yarn run test
    - name: Reset & Reattach HEAD
      run: git reset --hard
    - name: Publish
      run: perl ./tools/publish.pl
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}
    - name: Docker Login
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
    - name: Docker dynamic file generation
      run: perl ./tools/generate-dockerfile.pl
    - name: Docker build
      run: |
        IMAGE_ID=`echo "docker.pkg.github.com/${{ github.repository }}" | tr '[A-Z]' '[a-z]'`
        VERSION=`git describe --abbrev=0`

        echo Target ImageID: $IMAGE_ID

        docker build . -f ./dockerfiles/Dockerfile.server-media --tag $IMAGE_ID/server-media:$VERSION
        docker build ./nginx --tag $IMAGE_ID/nginx:$VERSION

        docker push $IMAGE_ID/server-media:$VERSION
        docker push $IMAGE_ID/nginx:$VERSION

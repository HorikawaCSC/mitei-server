scalar Date

input UploadFileInfo {
  filename: String!
  size: Int!
}

input UploadFileChunk {
  chunk: Upload!
  begin: Int!
  size: Int!
}

enum TranscodeStatus {
  pending
  running
  success
  failed
}

interface SourceBase {
  id: ID!
  status: TranscodeStatus!
  duration: Float
  thumbnailUrl: String
  width: Int
  height: Int
  name: String!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
}

enum SourceStatus {
  uploading
  available
  deleted
}

type FileSourceOrignalInfo {
  status: SourceStatus!
  extension: String!
  width: Int
  height: Int
  fileSize: Int!
}

type FileSource implements SourceBase {
  id: ID!
  status: TranscodeStatus!
  duration: Float
  thumbnailUrl: String
  width: Int
  height: Int
  name: String!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!

  # additional props
  source: FileSourceOrignalInfo!
  error: String
}

type FileSourceList {
  sources: [FileSource!]!
  total: Int!
}

enum RtmpStatus {
  live
  unused
}

type RtmpInput {
  id: ID!
  name: String!
  status: RtmpStatus!
  createdBy: User!
}

enum UserKind {
  normal
  admin
}

enum IdPType {
  twitter
}

type User {
  id: ID!
  userId: ID!
  screenName: String!
  iconUrl: String
  kind: UserKind!
  type: IdPType!
}

type Users {
  users: [User!]!
  total: Int!
}

type Query {
  # admin func
  fileSource(sourceId: ID!): FileSource
  fileSourceList(status: TranscodeStatus, skip: Int, take: Int): FileSourceList!


  users(kind: UserKind, type: IdPType, skip: Int, take: Int): Users!

  # normal func
  me: User
}

type Mutation {
  # admin func
  createFileSourceUpload(fileInfo: UploadFileInfo!): FileSource!
  uploadFileSourceChunk(sourceId: String!, file: UploadFileChunk!): Boolean!
  probeFileSource(sourceId: String!): Boolean!
  transcodeFileSource(sourceId: String!): Boolean!

  createRtmpInput(name: String!): RtmpInput!
}

schema {
  query: Query
  mutation: Mutation
}

scalar Date

input UploadFileInfo {
  filename: String!
  size: Int!
}

input UploadFileChunk {
  chunk: Upload!
  begin: Int!
  size: Int!
}

enum TranscodeStatus {
  pending
  running
  success
  failed
}

interface SourceBase {
  id: ID!
  status: TranscodeStatus!
  duration: Float
  thumbnailUrl: String
  width: Int
  height: Int
  name: String!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
  preset: TranscodePreset
}

enum SourceStatus {
  uploading
  available
  deleted
}

type FileSourceOrignalInfo {
  status: SourceStatus!
  extension: String!
  width: Int
  height: Int
  fileSize: Int!
}

type FileSource implements SourceBase {
  id: ID!
  status: TranscodeStatus!
  duration: Float
  thumbnailUrl: String
  width: Int
  height: Int
  name: String!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
  preset: TranscodePreset

  # additional props
  source: FileSourceOrignalInfo!
  error: String
  transcodeProgress: Float
}

type FileSourceList {
  sources: [FileSource!]!
  total: Int!
}

enum RtmpStatus {
  live
  unused
}

type RtmpInput {
  id: ID!
  name: String!
  status: RtmpStatus!
  publishUrl: String!
  preset: TranscodePreset!
  createdBy: User!
}

type RtmpInputList {
  inputs: [RtmpInput!]!
  total: Int!
}

type RecordSource implements SourceBase {
  id: ID!
  status: TranscodeStatus!
  duration: Float
  thumbnailUrl: String
  width: Int
  height: Int
  name: String!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
  preset: TranscodePreset!

  # additional props
  source: RtmpInput!
  error: String
}

type RecordSourceList {
  sources: [RecordSource!]!
  total: Int!
}

type TranscodePreset {
  id: ID!
  name: String!
  parameter: [String!]!
}

enum UserKind {
  normal
  admin
}

enum IdPType {
  twitter
}

type User {
  id: ID!
  userId: ID!
  screenName: String!
  iconUrl: String
  kind: UserKind!
  type: IdPType!
}

type Users {
  users: [User!]!
  total: Int!
}

type Query {
  # admin func
  fileSource(sourceId: ID!): FileSource
  fileSourceList(status: TranscodeStatus, skip: Int = 0, take: Int = 10): FileSourceList!

  recordSource(sourceId: ID!): RecordSource
  recordSourceList(skip: Int = 0, take: Int = 10): RecordSourceList!

  rtmpInputList(skip: Int = 0, take: Int = 10): RtmpInputList!

  users(kind: UserKind, type: IdPType, skip: Int = 0, take: Int = 10): Users!

  # normal func
  me: User
}

type Mutation {
  # admin func
  createFileSourceUpload(fileInfo: UploadFileInfo!): FileSource!
  uploadFileSourceChunk(sourceId: String!, file: UploadFileChunk!): Boolean!
  probeFileSource(sourceId: String!): Boolean!
  transcodeFileSource(sourceId: String!, presetId: String!): Boolean!

  createRtmpInput(name: String!, presetId: ID!): RtmpInput!
  removeRtmpInput(id: ID!): Boolean!

  createTranscodePreset(name: String!, parameter: [String!]!): TranscodePreset!

  enqueueFileSourceTranscode(sourceId: ID!, presetId: ID!): Boolean!
}

schema {
  query: Query
  mutation: Mutation
}
